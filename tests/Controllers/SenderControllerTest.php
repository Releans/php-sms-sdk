<?php
/*
 * ReleansAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace ReleansAPILib\Tests;

use ReleansAPILib\APIException;
use ReleansAPILib\Exceptions;
use ReleansAPILib\APIHelper;
use ReleansAPILib\Models;

class SenderControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \ReleansAPILib\Controllers\SenderController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \ReleansAPILib\ReleansAPIClient();
        self::$controller = $client->getSender();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Return the details of the sender name.
     */
    public function testSenderNameDetails()
    {
        // Parameters for the API call
        $id = 'sender-id';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getSenderNameDetails($id, $accept);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Create a new sender id to send messages using it
     */
    public function testCreateSenderName()
    {
        // Parameters for the API call
        $accept = 'text/plain';
        $contentType = 'text/plain';
        $body = 'Your sender name';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->createSenderName($accept, $contentType, $body);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '{"id":"ABCDEF"}',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }

    /**
     * List all senders names associated with the account
     */
    public function testGetAllSenders()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getAllSenders($accept);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertEquals(
            '[{"id":"xEYgLPQZOpnel5aKBzyVXvAWJ","senderName":"RELEANS","phoneNumber":"+15105607102","status":1}]',
            $this->httpResponse->getResponse()->getRawBody(),
            "Response body does not match exactly"
        );
    }
}
