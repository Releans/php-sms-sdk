<?php
/*
 * ReleansAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace ReleansAPILib\Tests;

use ReleansAPILib\APIException;
use ReleansAPILib\Exceptions;
use ReleansAPILib\APIHelper;
use ReleansAPILib\Models;

class MessageControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \ReleansAPILib\Controllers\MessageController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \ReleansAPILib\ReleansAPIClient();
        self::$controller = $client->getMessage();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * List all messages sent by the account.
     */
    public function testGetAllMessages()
    {
        // Parameters for the API call
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getAllMessages($accept);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * Return the details of the message.
     */
    public function testViewMessage()
    {
        // Parameters for the API call
        $id = 'id';
        $accept = '*/*';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getViewMessage($id, $accept);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
